DROP PROCEDURE IF EXISTS APWANT.SP_SYS_IS_AUTHORIZED;

CREATE PROCEDURE APWANT.SP_SYS_IS_AUTHORIZED (
    VAR_USER_ID VARCHAR(8), VAR_SYS_ID VARCHAR(6)
  , VAR_FUN_GROUP VARCHAR(20), VAR_FUN_ID VARCHAR(50)
  , VAR_SESSION_ID VARCHAR(40), VAR_IP_ADDRESS VARCHAR(40)
  , OUT VAR_SP_RESULT CHAR(1)
)
BEGIN
    SET @VAR_USER_ID = VAR_USER_ID;
    SET @VAR_SYS_ID = VAR_SYS_ID;
    SET @VAR_FUN_GROUP = VAR_FUN_GROUP;
    SET @VAR_FUN_ID = VAR_FUN_ID;
    SET @VAR_SESSION_ID = VAR_SESSION_ID;
    SET @VAR_IP_ADDRESS = VAR_IP_ADDRESS;
    SET @VAR_SP_RESULT = VAR_SP_RESULT;
    
    SET @VAR_CN_LOG = 0;
    SET @VAR_CN_FUN = 0;
    
    SELECT COUNT(1) INTO @VAR_CN_LOG
    FROM APWANT.SYS_USER_FUN_LOG
    WHERE USER_ID=@VAR_USER_ID AND SYS_ID=@VAR_SYS_ID
      AND SESSION_ID=@VAR_SESSION_ID AND IP_ADDRESS=@VAR_IP_ADDRESS
      AND LAST_USE_DT>=DATE_ADD(NOW(), INTERVAL -5 MINUTE);
    
    SELECT COUNT(1) INTO @VAR_CN_FUN
    FROM APWANT.SYS_USER_ROLE R
    JOIN APWANT.SYS_ROLE_FUN F
    ON R.SYS_ID=F.SYS_ID AND R.ROLE_ID=F.ROLE_ID
    WHERE R.USER_ID=@VAR_USER_ID AND F.SYS_ID=@VAR_SYS_ID 
      AND F.FUN_GROUP=@VAR_FUN_GROUP AND F.FUN_ID=@VAR_FUN_ID;

    IF @VAR_CN_LOG>0 AND @VAR_CN_FUN>0 THEN
        SET @VAR_SP_RESULT = 'Y';
    ELSE
        SET @VAR_SP_RESULT = 'N';
    END IF;
    
    SET VAR_SP_RESULT=@VAR_SP_RESULT;
    COMMIT;
END
;